import pytest
from gamma import *

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ tokenize
def test_1():
    text = "üèÜ–ü–æ–∫–æ—Ä—è–µ–º    –≤–µ—Ä—à–∏–Ω—É !! [club202446718|¬´–¢–µ—Ö–Ω–æ–û–ª–∏–º–ø–∞¬ª]...     "
    result = tokenize(text)
    assert result == ['–ø–æ–∫–æ—Ä—è–µ–º', '–≤–µ—Ä—à–∏–Ω—É', 'club202446718', '—Ç–µ—Ö–Ω–æ–æ–ª–∏–º–ø–∞']

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ tokenize –Ω–∞ –Ω–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π –≤—Ö–æ–¥
def test_2():
    text = 255
    with pytest.raises(AttributeError):
        tokenize(text)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_inverted_index
def test_3():
    result = create_inverted_index("test_files/very_small_file.csv")
    true =  {'–ø–æ–∫–æ—Ä—è–µ–º': {4293}, '–≤–µ—Ä—à–∏–Ω—É': {4293}, 'club202446718': {4293},
                     '—Ç–µ—Ö–Ω–æ–æ–ª–∏–º–ø–∞': {4293}, '–º—ã': {2447, 4293, 10543}, '–∫–∞—Ä—Ç–æ—á–∫–∏–≤–æ–∂–∞—Ç–æ–≥–æ': {10543},
                     '–≤–æ': {10543}, '–≤—Ç–æ—Ä–Ω–∏–∫': {10543}, '—É–∑–Ω–∞–ª–∏': {10543}, '—Å–æ–±—Ä–∞–Ω–∏–µ': {2447},
                     'english': {2447}, 'word': {2447}}
    assert result == true

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_inverted_index –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ö–æ–¥ - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
def test_4():
    with pytest.raises(FileNotFoundError):
        create_inverted_index("test_files/no_existing_file.csv")

# # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_inverted_index –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ö–æ–¥ - —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
def test_5():
    with pytest.raises(OSError):
        create_inverted_index(23534)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ delta_encode
def test_6():
    numbers = [7, 17]
    res = [7, 10]
    assert delta_encode(numbers) == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ delta_encode –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_7():
    numbers = "ha-ha"
    with pytest.raises(TypeError):
        delta_encode(numbers)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_inverted_index –Ω–∞ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
def test_8():
    result = create_inverted_index("test_files/empty_file.csv")
    assert len(result) == 0

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ create_inverted_index –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª (–±–µ–∑ –ø–æ–ª—è text)
def test_9():
    with pytest.raises(KeyError):
        create_inverted_index("test_files/uncorrect_file.csv")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ delta_decode
def test_10():
    numbers = [7, 10]
    res = [7, 17]
    assert delta_decode(numbers) == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ delta_decode –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_11():
    numbers = "ha-ha"
    with pytest.raises(TypeError):
        delta_decode(numbers)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ unary
def test_12():
    number = 5
    res = '0000'
    assert unary(number) == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ unary –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_13():
    number = "ha-ha"
    with pytest.raises(TypeError):
        unary(number)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_encode
def test_14():
    numbers = 10
    res = "0001010"
    assert gamma_encode(numbers) == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_encode –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_15():
    numbers = "ha-ha"
    with pytest.raises(TypeError):
        gamma_encode(numbers)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_decode
def test_16():
    numbers = "0001010"
    res = 10
    assert gamma_decode(numbers) == res


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_decode –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_17():
    numbers = 25
    with pytest.raises(AttributeError):
        gamma_decode(numbers)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_encode_bitvector
def test_18():
    numbers = [7, 10]
    res = "001110001010"
    assert str(gamma_encode_bitvector(numbers)) == res


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_encode_bitvector –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—Ö–æ–¥
def test_19():
    numbers = "ha-ha"
    with pytest.raises(TypeError):
        gamma_encode_bitvector(numbers)

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ gamma_decode_bitvector
def test_20():
    numbers = "001110001010"
    res = [7, 10]
    assert gamma_decode_bitvector(numbers) == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search
def test_21():
    query = '–í–µ—Ä—à–∏–Ω—É –Ω–∞'
    inverted_index = create_inverted_index("test_files/test_search_file.csv")
    matching_post_ids = search(query, inverted_index)
    res = {1, 2}
    assert matching_post_ids == res

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
def test_22():
    query = ''
    inverted_index = create_inverted_index("test_files/test_search_file.csv")
    matching_post_ids = search(query, inverted_index)
    assert matching_post_ids == set()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ search - –Ω–µ–∫–æ—Ä—Ä–µ—Ç–∫–Ω—ã–π –≤–≤–æ–¥
def test_23():
    query = [5, True, -156, {}, []]
    inverted_index = create_inverted_index("test_files/test_search_file.csv")
    for q in query:
        with pytest.raises(AttributeError):
            search(query, inverted_index)
    with pytest.raises(AttributeError):
            search('–†–µ–∫—Ç–æ—Ä –°–ü–±–ì–£', [])